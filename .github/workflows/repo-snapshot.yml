name: Repo Snapshot
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: pip install requests

      - name: Run snapshot (GitHub API, no git needed)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          python - <<'PY'
          from __future__ import annotations
          import os, base64, requests

          OWNER="Zaikon13"; REPO="wallet_monitor_Dex"; API="https://api.github.com"
          H={"Accept":"application/vnd.github+json","User-Agent":"codex-pull/1.0","Authorization":f"Bearer {os.getenv('GITHUB_TOKEN','')}"}
          def jget(u,p=None): r=requests.get(u,headers=H,params=p,timeout=30); r.raise_for_status(); return r.json()
          info=jget(f"{API}/repos/{OWNER}/{REPO}")
          branch=info.get("default_branch") or "main"
          ref=jget(f"{API}/repos/{OWNER}/{REPO}/git/refs/heads/{branch}")
          sha=ref["object"]["sha"]
          tree=jget(f"{API}/repos/{OWNER}/{REPO}/git/trees/{sha}", params={"recursive":"1"})
          rows=[]
          for n in tree.get("tree",[]):
            typ=n["type"]; path=n["path"]; s=(n.get("sha") or "")[:7]; sz=n.get("size") or "-"
            rows.append(f"{typ:4} {str(sz):>10}  {s:7}  {path}")
          rows.sort(key=lambda s:s.split()[-1])
          open("_gh_tree.txt","w",encoding="utf-8").write("\n".join(rows))

          want={"main.py","requirements.txt","core/tz.py","core/config.py","core/signals/server.py",
                "core/wallet_monitor.py","core/watch.py","core/holdings.py","core/guards.py",
                "core/providers/cronos.py","reports/scheduler.py","reports/day_report.py",
                "telegram/api.py","telegram/dispatcher.py","telegram/formatters.py"}
          idx={n["path"]:n for n in tree.get("tree",[]) if n["type"]=="blob"}
          with open("_gh_critical.txt","w",encoding="utf-8") as f:
            f.write("CRITICAL FILES â€” PRESENCE\n")
            for p in sorted(want):
              if p in idx:
                f.write(f"[OK]  {p}  ({idx[p].get('size')} bytes)\n")
              else:
                f.write(f"[MISS] {p}\n")
            f.write("\nHEADS:\n")
            for p in sorted(want):
              if p not in idx: continue
              blob=jget(f"{API}/repos/{OWNER}/{REPO}/git/blobs/{idx[p]['sha']}")
              if blob.get("encoding")!="base64": continue
              raw=base64.b64decode(blob.get("content",""))
              head=raw[:1600].decode("utf-8","replace")
              f.write(f"\n----- {p} -----\n{head}\n")
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: repo-snapshot
          path: |
            _gh_tree.txt
            _gh_critical.txt
