name: Dedent Fix (open PR)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  dedent:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Dedent inline
        id: dedent
        run: |
          python - <<'PY'
          import pathlib, textwrap, sys, json, os
          ROOT = pathlib.Path('.').resolve()
          IGN = {".git",".github","__pycache__","venv",".venv","node_modules","dist","build",".mypy_cache",".pytest_cache"}
          def files():
              for p in ROOT.rglob("*.py"):
                  if any(part in IGN for part in p.parts): 
                      continue
                  yield p
          def needs_dedent(s, sample=50):
              # Αν τα περισσότερα από τα πρώτα 'sample' μη-κενά lines ξεκινούν με space/tab, θεωρούμε ότι χρειάζεται dedent
              nz = [ln for ln in s.splitlines() if ln.strip()]
              head = nz[:sample] if nz else []
              if not head:
                  return False
              num_ind = sum(1 for ln in head if ln[:1] in (" ", "\t"))
              return num_ind >= max(1, int(0.8 * len(head)))  # 80% heuristic
          changed = []
          for p in files():
              s = p.read_text(encoding="utf-8")
              if needs_dedent(s):
                  d = textwrap.dedent(s)
                  if d != s:
                      p.write_text(d, encoding="utf-8")
                      changed.append(str(p))
          print(f"Dedented {len(changed)} file(s).")
          # Εκτύπωσε λίστα για downstream steps
          print("::set-output name=changed_count::%d" % len(changed))
          print("::set-output name=changed_list::%s" % json.dumps(changed))
          PY

      - name: Fail if non-Python files changed
        run: |
          if git status --porcelain | grep -E '^[AMDR].*\.(yml|yaml|md|env|txt|cfg|ini|procfile|json)$'; then
            echo "Non-Python files changed; aborting."
            git status --porcelain
            exit 1
          fi

      - name: Compile all Python files (sanity)
        run: |
          python - <<'PY'
          import compileall, sys
          ok = compileall.compile_dir('.', quiet=1, force=False)
          sys.exit(0 if ok else 1)
          PY

      - name: Create PR (only if changes exist)
        if: steps.dedent.outputs.changed_count != '0'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: dedent/fix-indentation
          title: "fix: remove accidental leading indentation across repo"
          commit-message: "fix: dedent python files with accidental global indentation"
          body: |
            Automated dedent across Python files.
            - Removes accidental leading indentation detected on first non-empty lines (≈80% of head lines indented).
            - No functional changes intended beyond syntax unblocking.
            - Includes a compile check to ensure imports succeed.

            **Checklist**
            - [ ] Only `*.py` files changed
            - [ ] `py_compile` passes (see job logs)
          labels: chore, automated
