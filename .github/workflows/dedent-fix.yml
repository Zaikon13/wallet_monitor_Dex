name: Dedent Fix (open PR)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  dedent:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Dedent inline (with logs)
        id: dedent
        run: |
          python - <<'PY'
          import pathlib, textwrap, json, sys, os   # 👈 προστέθηκε os
          ROOT = pathlib.Path('.').resolve()
          IGN = {".git",".github","__pycache__","venv",".venv","node_modules","dist","build",".mypy_cache",".pytest_cache"}
          def py_files():
              for p in ROOT.rglob("*.py"):
                  if any(part in IGN for part in p.parts):
                      continue
                  yield p

          def needs_dedent(s, head=80):
              lines = [ln for ln in s.splitlines() if ln.strip()]
              if not lines: 
                  return False
              first = lines[0][:1] in (" ","\t")
              sample = lines[:head]
              ratio = (sum(1 for ln in sample if ln[:1] in (" ","\t")) / max(1, len(sample)))
              return first or ratio >= 0.70

          changed = []
          for p in py_files():
              s = p.read_text(encoding="utf-8")
              if needs_dedent(s):
                  d = textwrap.dedent(s)
                  if d != s:
                      p.write_text(d, encoding="utf-8")
                      changed.append(str(p))

          print(f"[dedent] changed files: {len(changed)}")
          for c in changed[:50]:
              print(f"  - {c}")

          # outputs (νέα μέθοδος)
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"changed_count={len(changed)}\n")
              fh.write(f"changed_list={json.dumps(changed)}\n")
          PY

      - name: Show git status (debug)
        run: |
          git status --porcelain
          git diff --name-only

      - name: Fail if non-Python files changed
        run: |
          if git status --porcelain | grep -E '^[AMDR].*\.(yml|yaml|md|env|txt|cfg|ini|procfile|json)$'; then
            echo "Non-Python files changed; aborting."
            git status --porcelain
            exit 1
          fi

      - name: Compile tracked Python files (sanity)
        run: |
          python - <<'PY'
          import subprocess, sys, py_compile
          # Πάρε μόνο τα tracked *.py από το repo (όχι .git/)
          files = subprocess.check_output(
              ["git", "ls-files", "*.py"], text=True
          ).splitlines()

          ok = True
          for f in files:
              try:
                  py_compile.compile(f, doraise=True)
              except Exception as e:
                  print(f"[py_compile] FAIL: {f} -> {e}")
                  ok = False

          print(f"[py_compile] Checked {len(files)} tracked .py files")
          sys.exit(0 if ok else 1)
          PY

      - name: Create PR (only if changes exist)
        if: steps.dedent.outputs.changed_count != '0'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: dedent/fix-indentation
          title: "fix: remove accidental leading indentation across repo"
          commit-message: "fix: dedent python files with accidental global indentation"
          body: |
            Automated dedent across Python files.
            - Detects first non-empty line or ≥70% of head lines indented.
            - Adds logs of changed files.
            - Includes a compile check to ensure imports succeed.

            **Checklist**
            - [ ] Only `*.py` files changed
            - [ ] `py_compile` passes (see job logs)
          labels: chore, automated
